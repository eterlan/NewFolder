//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigContext {

    public ConfigEntity dmgConfigsEntity { get { return GetGroup(ConfigMatcher.DmgConfigs).GetSingleEntity(); } }
    public ECS.Config.DmgConfigsComponent dmgConfigs { get { return dmgConfigsEntity.dmgConfigs; } }
    public bool hasDmgConfigs { get { return dmgConfigsEntity != null; } }

    public ConfigEntity SetDmgConfigs(ECS.Config.DmgConfigs newConfigs, UnityEngine.GameObject[] newPrefabs) {
        if (hasDmgConfigs) {
            throw new Entitas.EntitasException("Could not set DmgConfigs!\n" + this + " already has an entity with ECS.Config.DmgConfigsComponent!",
                "You should check if the context already has a dmgConfigsEntity before setting it or use context.ReplaceDmgConfigs().");
        }
        var entity = CreateEntity();
        entity.AddDmgConfigs(newConfigs, newPrefabs);
        return entity;
    }

    public void ReplaceDmgConfigs(ECS.Config.DmgConfigs newConfigs, UnityEngine.GameObject[] newPrefabs) {
        var entity = dmgConfigsEntity;
        if (entity == null) {
            entity = SetDmgConfigs(newConfigs, newPrefabs);
        } else {
            entity.ReplaceDmgConfigs(newConfigs, newPrefabs);
        }
    }

    public void RemoveDmgConfigs() {
        dmgConfigsEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigEntity {

    public ECS.Config.DmgConfigsComponent dmgConfigs { get { return (ECS.Config.DmgConfigsComponent)GetComponent(ConfigComponentsLookup.DmgConfigs); } }
    public bool hasDmgConfigs { get { return HasComponent(ConfigComponentsLookup.DmgConfigs); } }

    public void AddDmgConfigs(ECS.Config.DmgConfigs newConfigs, UnityEngine.GameObject[] newPrefabs) {
        var index = ConfigComponentsLookup.DmgConfigs;
        var component = (ECS.Config.DmgConfigsComponent)CreateComponent(index, typeof(ECS.Config.DmgConfigsComponent));
        component.configs = newConfigs;
        component.prefabs = newPrefabs;
        AddComponent(index, component);
    }

    public void ReplaceDmgConfigs(ECS.Config.DmgConfigs newConfigs, UnityEngine.GameObject[] newPrefabs) {
        var index = ConfigComponentsLookup.DmgConfigs;
        var component = (ECS.Config.DmgConfigsComponent)CreateComponent(index, typeof(ECS.Config.DmgConfigsComponent));
        component.configs = newConfigs;
        component.prefabs = newPrefabs;
        ReplaceComponent(index, component);
    }

    public void RemoveDmgConfigs() {
        RemoveComponent(ConfigComponentsLookup.DmgConfigs);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ConfigMatcher {

    static Entitas.IMatcher<ConfigEntity> _matcherDmgConfigs;

    public static Entitas.IMatcher<ConfigEntity> DmgConfigs {
        get {
            if (_matcherDmgConfigs == null) {
                var matcher = (Entitas.Matcher<ConfigEntity>)Entitas.Matcher<ConfigEntity>.AllOf(ConfigComponentsLookup.DmgConfigs);
                matcher.componentNames = ConfigComponentsLookup.componentNames;
                _matcherDmgConfigs = matcher;
            }

            return _matcherDmgConfigs;
        }
    }
}
