//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigContext {

    public ConfigEntity playerConfigEntity { get { return GetGroup(ConfigMatcher.PlayerConfig).GetSingleEntity(); } }
    public ECS.Config.PlayerConfigComponent playerConfig { get { return playerConfigEntity.playerConfig; } }
    public bool hasPlayerConfig { get { return playerConfigEntity != null; } }

    public ConfigEntity SetPlayerConfig(ECS.Config.PlayerConfig newConfig, UnityEngine.Sprite newSprite) {
        if (hasPlayerConfig) {
            throw new Entitas.EntitasException("Could not set PlayerConfig!\n" + this + " already has an entity with ECS.Config.PlayerConfigComponent!",
                "You should check if the context already has a playerConfigEntity before setting it or use context.ReplacePlayerConfig().");
        }
        var entity = CreateEntity();
        entity.AddPlayerConfig(newConfig, newSprite);
        return entity;
    }

    public void ReplacePlayerConfig(ECS.Config.PlayerConfig newConfig, UnityEngine.Sprite newSprite) {
        var entity = playerConfigEntity;
        if (entity == null) {
            entity = SetPlayerConfig(newConfig, newSprite);
        } else {
            entity.ReplacePlayerConfig(newConfig, newSprite);
        }
    }

    public void RemovePlayerConfig() {
        playerConfigEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigEntity {

    public ECS.Config.PlayerConfigComponent playerConfig { get { return (ECS.Config.PlayerConfigComponent)GetComponent(ConfigComponentsLookup.PlayerConfig); } }
    public bool hasPlayerConfig { get { return HasComponent(ConfigComponentsLookup.PlayerConfig); } }

    public void AddPlayerConfig(ECS.Config.PlayerConfig newConfig, UnityEngine.Sprite newSprite) {
        var index = ConfigComponentsLookup.PlayerConfig;
        var component = (ECS.Config.PlayerConfigComponent)CreateComponent(index, typeof(ECS.Config.PlayerConfigComponent));
        component.config = newConfig;
        component.sprite = newSprite;
        AddComponent(index, component);
    }

    public void ReplacePlayerConfig(ECS.Config.PlayerConfig newConfig, UnityEngine.Sprite newSprite) {
        var index = ConfigComponentsLookup.PlayerConfig;
        var component = (ECS.Config.PlayerConfigComponent)CreateComponent(index, typeof(ECS.Config.PlayerConfigComponent));
        component.config = newConfig;
        component.sprite = newSprite;
        ReplaceComponent(index, component);
    }

    public void RemovePlayerConfig() {
        RemoveComponent(ConfigComponentsLookup.PlayerConfig);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ConfigMatcher {

    static Entitas.IMatcher<ConfigEntity> _matcherPlayerConfig;

    public static Entitas.IMatcher<ConfigEntity> PlayerConfig {
        get {
            if (_matcherPlayerConfig == null) {
                var matcher = (Entitas.Matcher<ConfigEntity>)Entitas.Matcher<ConfigEntity>.AllOf(ConfigComponentsLookup.PlayerConfig);
                matcher.componentNames = ConfigComponentsLookup.componentNames;
                _matcherPlayerConfig = matcher;
            }

            return _matcherPlayerConfig;
        }
    }
}
